<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/persistence/compliance/mongo/CompliancePersistenceMapper.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.persistence.compliance.mongo;

import dexter.banking.booktransfers.core.domain.compliance.ComplianceCase;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

@Mapper(componentModel = "spring")
interface CompliancePersistenceMapper {

    @Mapping(target = "caseId", source = "id")
    @Mapping(target = "_id", ignore = true)
    ComplianceCaseDocument toDocument(ComplianceCase aggregate);

    default ComplianceCase toDomain(ComplianceCaseDocument document) {
        if (document == null) {
            return null;
        }
        // This default implementation is required to correctly use the aggregate's static factory method.
        return ComplianceCase.rehydrate(
                document.getCaseId(),
                document.getPaymentId(),
                document.getStatus(),
                document.getReason()
        );
    }

    @Mapping(target = "caseId", ignore = true)
    @Mapping(target = "paymentId", ignore = true)
    @Mapping(target = "_id", ignore = true)
    void updateDocument(@MappingTarget ComplianceCaseDocument doc, ComplianceCase aggregate);
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/persistence/payment/mongo/PersistenceMapper.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.persistence.payment.mongo;

import dexter.banking.booktransfers.core.domain.payment.Payment;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

@Mapper(componentModel = "spring")
interface PersistenceMapper {

    @Mapping(target = "id", source = "transactionId")
    Payment.PaymentMemento toMemento(TransactionDocument document);

    @Mapping(target = "transactionId", source = "memento.id")
    @Mapping(target = "transactionReference", source = "memento.transactionReference")
    @Mapping(target = "journeyName", source = "memento.journeyName")
    @Mapping(target = "status", source = "memento.status")
    @Mapping(target = "state", source = "memento.state")
    @Mapping(target = "debitLegResult", source = "memento.debitLegResult")
    @Mapping(target = "limitEarmarkResult", source = "memento.limitEarmarkResult")
    @Mapping(target = "creditLegResult", source = "memento.creditLegResult")
    @Mapping(target = "_id", ignore = true)
    @Mapping(target = "orchestrationContext", ignore = true)
    TransactionDocument toDocument(Payment payment);

    @Mapping(target = "transactionId", source = "memento.id")
    @Mapping(target = "transactionReference", source = "memento.transactionReference")
    @Mapping(target = "journeyName", source = "memento.journeyName")
    @Mapping(target = "status", source = "memento.status")
    @Mapping(target = "state", source = "memento.state")
    @Mapping(target = "debitLegResult", source = "memento.debitLegResult")
    @Mapping(target = "limitEarmarkResult", source = "memento.limitEarmarkResult")
    @Mapping(target = "creditLegResult", source = "memento.creditLegResult")
    @Mapping(target = "_id", ignore = true)
    @Mapping(target = "orchestrationContext", ignore = true)
    void updateDocumentFromDomain(@MappingTarget TransactionDocument doc, Payment payment);
}
<<--FILE_END-->>
