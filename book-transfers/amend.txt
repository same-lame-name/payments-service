<<--FILE_START-->>
Path: ./app/src/main/java/dexter/banking/booktransfers/app/BookTransfersApplication.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.app;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScans;
import org.springframework.context.annotation.FilterType;

/**
 * The main entry point for the Book Transfers application.
 *
 * @SpringBootApplication enables auto-configuration but its default component scan is disabled.
 * We use @ComponentScans to define two precise rules:
 * 1. A standard scan for all components within the 'core' and 'app' modules.
 * 2. A custom, filtered scan for the 'infrastructure' module that ONLY discovers beans
 * that implement the FacadeConfiguration marker interface. This is enforced by
 * useDefaultFilters = false.
 */
@SpringBootApplication
@ComponentScans({
    @ComponentScan(basePackages = {"dexter.banking.booktransfers.core", "dexter.banking.booktransfers.app"}),
    @ComponentScan(
        basePackages = "dexter.banking.booktransfers.infrastructure",
        includeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = FacadeConfiguration.class),
        useDefaultFilters = false // CRITICAL: This ensures only our filter is used.
    )
})
public class BookTransfersApplication {

    public static void main(String[] args) {
        SpringApplication.run(BookTransfersApplication.class, args);
    }
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/FacadeConfiguration.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter;

/**
 * A marker interface for all public infrastructure adapter @Configuration classes.
 *
 * This interface is used by a custom ComponentScan filter in the main application
 * to discover and activate infrastructure "plugins" in a controlled and explicit way.
 * An adapter is only active if its public facade implements this interface.
 */
public interface FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/in/cli/CliAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.in.cli;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = CliAdapterConfig.class)
public class CliAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/in/messaging/MessagingInboundAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.in.messaging;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = MessagingInboundAdapterConfig.class)
public class MessagingInboundAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/in/query/compliance/mongo/ComplianceQueryHandler.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.in.query.compliance.mongo;

import dexter.banking.booktransfers.core.application.compliance.query.ComplianceCaseView;
import dexter.banking.booktransfers.core.port.in.compliance.ComplianceQueryUseCase;
import dexter.banking.booktransfers.core.port.out.ComplianceCaseRepositoryPort;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.UUID;

@Component
@RequiredArgsConstructor
public class MongoComplianceQueryHandler implements ComplianceQueryUseCase {

    private final ComplianceCaseRepositoryPort complianceCaseRepository;

    @Override
    public Optional<ComplianceCaseView> findByPaymentId(UUID paymentId) {
        return complianceCaseRepository.findByPaymentId(paymentId)
                .map(complianceCase -> new ComplianceCaseView(
                        complianceCase.getId(),
                        complianceCase.getPaymentId(),
                        complianceCase.getStatus()
                ));
    }
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/in/web/WebAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.in.web;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = WebAdapterConfig.class)
public class WebAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/config/ConfigAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.config;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = ConfigAdapterConfig.class)
public class ConfigAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/events/EventsAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.events;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = EventsAdapterConfig.class)
public class EventsAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/http/payment/feign/HttpOutboundAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.http.payment.feign;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableFeignClients(basePackageClasses = HttpOutboundAdapterConfig.class)
@ComponentScan(basePackageClasses = HttpOutboundAdapterConfig.class)
public class HttpOutboundAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/messaging/payment/jms/MessagingOutboundAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.messaging.payment.jms;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = MessagingOutboundAdapterConfig.class)
public class MessagingOutboundAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/persistence/compliance/mongo/CompliancePersistenceConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.persistence.compliance.mongo;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

@Configuration
@EnableMongoRepositories(basePackageClasses = CompliancePersistenceConfig.class)
@ComponentScan(basePackageClasses = CompliancePersistenceConfig.class)
public class CompliancePersistenceConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/persistence/idempotency/mongo/IdempotencyPersistenceConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.persistence.idempotency.mongo;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

@Configuration
@EnableMongoRepositories(basePackageClasses = IdempotencyPersistenceConfig.class)
@ComponentScan(basePackageClasses = IdempotencyPersistenceConfig.class)
public class IdempotencyPersistenceConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/persistence/payment/mongo/PaymentPersistenceConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.persistence.payment.mongo;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

@Configuration
@EnableMongoRepositories(basePackageClasses = PaymentPersistenceConfig.class)
@ComponentScan(basePackageClasses = PaymentPersistenceConfig.class)
public class PaymentPersistenceConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/adapter/out/stub/customer/CustomerAdapterConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.adapter.out.stub.customer;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = CustomerAdapterConfig.class)
public class CustomerAdapterConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
<<--FILE_START-->>
Path: ./infrastructure/src/main/java/dexter/banking/booktransfers/infrastructure/policy/PolicyConfig.java
<<--CONTENT_START-->>
package dexter.banking.booktransfers.infrastructure.policy;

import dexter.banking.booktransfers.infrastructure.FacadeConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = PolicyConfig.class)
public class PolicyConfig implements FacadeConfiguration {
}
<<--FILE_END-->>
